______________________________________________________________________________________________
Models for collaborative development
There are two primary ways people collaborate on GitHub:

Shared repository
        shared repository, individuals and teams are explicitly designated as contributors with read, write, or administrator access. 
        This simple permission structure, combined with features like protected branches and Marketplace, helps teams progress quickly
        when they adopt GitHub.

Fork repository
        A fork is a copy of a repository that you manage. Forks let you make changes to a project without affecting the original repository. 
        You can fetch updates from or submit changes to the original repository with pull requests.
        Any user or organization on GitHub can fork a repository. Forking a repository is similar to copying another repository, with two major differences:

        You can use a pull request to suggest changes from your fork to the original repository, also known as the upstream repository.
        You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository.
        Deleting a fork does not delete the original upstream repository. In fact, you can make any changes you want to your fork--add 
        collaborators, rename files, generate GitHub Pages--with no effect on the original.
pull requests
        Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. Once a pull request is opened, 
        you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.
______________________________________________________________________________________________




---
# download a repository on GitHub.com to our machine
git clone https://github.com/me/repo.git

# change into the `repo` directory
cd repo

# create a new branch to store any new changes
git branch my-branch

# switch to that branch (line of development)
git checkout my-branch

# make changes, for example, edit `file1.md` and `file2.md` using the text editor

# stage the changed files
git add file1.md file2.md

# take a snapshot of the staging area (anything that's been added)
git commit -m "my snapshot"

# push changes to github
git push --set-upstream origin my-branch
_________________________________________________________________________



# create a new directory, and initialize it with git-specific functions
git init my-repo

# change into the `my-repo` directory
cd my-repo

# create the first file in the project
touch README.md

# git isn't aware of the file, stage it
git add README.md

# take a snapshot of the staging area
git commit -m "add README to initial commit"

# provide the path for the repository you created on github
git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git

# push changes to github
git push --set-upstream origin master
_________________________________________________________________________

# assumption: a project called `repo` already exists on the machine, and a new branch has been pushed to GitHub.com since the last time changes were made locally

# change into the `repo` directory
cd repo

# update all remote tracking branches, and the currently checked out branch
git pull

# change into the existing branch called `feature-a`
git checkout feature-a

# make changes, for example, edit `file1.md` using the text editor

# stage the changed file
git add file1.md

# take a snapshot of the staging area
git commit -m "edit file1"

# push changes to github
git push
_________________________________________________________________________




